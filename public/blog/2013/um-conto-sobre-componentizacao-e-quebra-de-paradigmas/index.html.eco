---
title: "Um conto sobre componentização e quebra de paradigmas"
datePost: 29/07/2013
layout: "post"
relativeOutDirPath: 'posts'
path: "../../../"
pathBlog: "../../"
---

<p class="lead">Melhorar processos é parte essencial do nosso trabalho, mas em algum momento percebemos que só melhorar pode não ser o suficiente, as vezes é preciso quebrar paradigmas.</p>

<h3>Mas sou apenas um "mero desenvolvedor"</h3>

<p>No <a href="http://tableless.com.br/drops-14-sou-um-mero-desenvolvedor/#.UfKtxNK1zIg">último drops</a> do <a href="https://twitter.com/diegoeis ">Diego Eis</a>, ele conta sobre uma conversa no tuiter, na qual um dos desenvolvedores faz esse comentário.</p>

<p>Não, você não é apenas um "mero desenvolvedor", você está no centro de mudanças importantes no nosso mercado e pode influenciar positivamente.</p>

<h3>O processo padrão</h3>

<p>Na maioria das vezes, essas são as etapas resumidas de um projeto...</p>

<ol>
	<li>São criados Wireframes (geralmente pelo Diretor de Arte ou por alguém focado nessa parte)</li>
	<li>Em seguida o Diretor de Arte cria PSD's para TODAS as páginas, não é incomum uns 40 PSD's serem criados.</li>
	<li>O desenvolvedor Front-End cria HTML's e os estilos para todas as páginas e interações.</li>
	<li>Então o desenvolvedor Back-End coloca "vida" no projeto.</li>
</ol>

<p>Inclusive em alguns casos praticamente não existe contato entre os integrantes do projeto.</p>

<p>Mas... será que não é hora de mudar os conceitos?</p>

<h3>Os tempos são outros...</h3>

<p>Em algum momento, observei que receber 40 PSD's simplesmente não fazia sentido, tanto para mim quanto para o Diretor de Arte. Um projeto bem diagramado mantém caracteristicas praticamente iguais entre as páginas e na maioria dos casos apresentam os mesmos <b>componentes</b>.</p>

<p>Cheguei a conclusão que seria muito mais lógico trabalhar os <b>componentes</b> de forma isolada, e usar eles nas páginas de acordo com a necessidade.</p>

<h3>A importancia do trabalho em equipe</h3>

<p>De nada adianta ter idéias para melhorar o processo e não tentar coloca-las em prática e ouvir sugestões do resto da equipe.</p>

<p>Uma mudança como essa impacta diretamente nas outras áreas, afinal o Diretor de Arte vai precisar se adaptar a nova forma de trabalhar e o pessoal do Back-End terá que programar os componentes "separadamente".</p>

<p>Portanto é extremamente necessário debater as idéias para chegar em um processo que fique bom para todos. Todas as áreas querem a mesma coisa: entregar projetos cada vez melhores. Uma troca de idéias para deixar as coisas alinhadas é muito importante para garantir uma boa entrega.</p>

<p>Trabalho com pessoas muito competentes e inovadoras do meu lado, então as coisas fluiram naturalmente.</p>

<h3>A criação de um Framework</h3>

<p>A estrutura HTML/CSS/JS dos componentes geralmente seguem linhas de código parecidas, mesmo quando são visualmente muito diferentes de um projeto para outro, então a criação de um Framework otimizaria muito o trabalho.</p>

<p>Após alguns meses e bastante teste, cheguei em um modelo estrutural e organizacional que considero o ideal por enquanto, podem ver nesse artigo: <a href="../sobre-organizacao-de-componentes-com-pre-processadores/">Sobre organização de componentes com pré-processadores</a></p>

<h3>Como trabalhamos atualmente</h3>

<p>É um resumo do resumo do processo que estamos seguindo (e que está sempre em estado 'beta')...</p>

<ol>
	<li>Todos os envolvidos participam com o Diretor de Arte no desenvolvimento dos Wireframes.</li>
	<li>Fazemos um levantamento dos componentes que serão utilizados no projeto.</li>
	<li>Diretor de Arte cria layouts base (home e algumas internas) para aprovação e em paralelo trabalha nos componentes.</li>
	<li>Desenvolvo a estrutura base do site (header, footer...).</li>
	<li>Agora já tenho todo o aparato para trabalhar os componentes e pensar em escalabilidade.</li>
	<li>Com a estrutura básica e os componentes prontos, montar prótotipos funcionais passa a ser um "quebra-cabeça", basta juntar as peças e a página está criada!</li>
	<li>Nessa etapa o Diretor de Arte, na maioria dos casos, trabalha apenas nos Wireframes ou rascunhos.</li>
	<li>Faço validações com o Diretor de Arte e com o Back-End após cada página desenvolvida.</li>
	<li>Nas etapas mais avançadas do projeto, o programador Back-End já consegue sozinho criar páginas com os componentes necessários sem precisar alterar nada no HTML/CSS.</li>
</ol>

<h3>Atomic Design</h3>

<p>Esse ano descobrimos que o <a href="https://twitter.com/brad_frost">Brad Frost</a> escreveu sobre algo que chamou de <a href="http://bradfrostweb.com/blog/post/atomic-web-design/">Atomic Design</a>, que tem uma idéia muito parecida com a que estavamos usando, e ela vai ainda mais a fundo, trabalhando com:

<ul>
	<li><b>Átomos</b>: Elementos mínimos</li>
	<li><b>Moléculas</b>: Junção desses elementos</li>
	<li><b>Organismos</b>: Agrupamento dessas móleculas</li>
</ul>

<p>Existem dois ótimos artigos em português, um do <a href="http://arquiteturadeinformacao.com/2013/06/16/atomic-design-redesenhando-os-entregaveis-de-designers-e-desenvolvedores/">Fabricio Teixeira</a> e outro da <a href="http://tableless.com.br/o-que-e-design-atomic/#.UfLPotK1zIg">Dani Guerrato</a>. Recomendo a leitura.</p>

<h3>Dicas para trabalhar os componentes</h3>

<h4>OOCSS</h4>

<p><strong>OOCSS</strong> (Object Oriented CSS) casa perfeitamente com a idéia de componentes, você passa a criar classes baseadas na função, e pode reutilizar em vários lugares. Tem um post muito bacana do <a href="http://wbruno.com.br/css/object-oriented-css-a-teoria-das-classes-reutilizaveis-oocss/">William Bruno falando sobre isso</a>.</p>

<p>Mas CUIDADO, é preciso usar essa técnica com prudencia, algo como <code>"box full side"</code> faz sentido, mas <code>"box big float-left font18 red border"</code> engessa o código.</p>

<h4>Pense na manutenção (sem esquecer da performance!)</h4>

<p>Performance é fundamental, mas não se esqueça que um código que não tem foco em manutenção e escalabilidade pode gerar gambiarras que automaticamente vão interferir na performance.</p>

<p>Então, pense sempre um passo a frente, especialmente em grandes projetos.</p>

<h4>Evite seletores complexos</h4>

<p>Um seletor <code>.header .nav li a</code> é ruim para performance e te deixa travado.</p>

<p>Colocar uma classe <code>.nav-link</code> no <code>a</code> e referenciar diretamente no CSS faz mais sentido.</p> 

<p>Esse é o principio básico para componentização, usar a classe de forma mais genérica possível. Se você tiver uma busca no site, comece a usar <code>.search</code> ao invés de <code>.header .search</code>, assim pode usar o <b>componente</b> em qualquer lugar, não apenas dentro do <code>header</code>.</p>

<h4>Aproveite a cascata</h4>

<p><b>CSS</b> significa Cascading Style Sheets e podemos (e devemos) fazer uso disso.</p>

<p>Se por exemplo, a cor dos h4 dentro de determinado local precise ser azul, é interessante adicionar uma classe na div pai, e sobrescrever as regras (reparem que uso a classe blue de exemplo, analise antes e veja o nome que faz mais sentido): 
<code>.box.blue h4{color: #4A8CF7}</code></p>

<h3>No fim tudo depende do projeto e da equipe</h3>

<p>São apenas sugestões de um método que estamos usando e que está dando certo. Mas como tudo no mundo dev, depende muito do tipo de projeto e com quem você trabalha. Espero que ajude de alguma forma.</p>

<p class="end">Abraços galera!</p>
