---
title: "É possível utilizar componentes desenvolvidos apenas com CSS?"
datePost: 22/04/2014
layout: "post"
relativeOutDirPath: 'posts'
path: "../../../"
pathBlog: "../../"
---

<p class="lead">Após o lançamento do <a href="http://www.felipefialho.com/css-components">Pure CSS Components</a>, escrevo as minhas impressões sobre o quanto é possível utilizar componentes desenvolvidos apenas com CSS.</p>

<h3>Sobre o projeto</h3>

<p>Sou apaixonado por qualquer coisa desenvolvida usando apenas CSS. Isso começou em meados de 2012, quando tive contato com o <a href="http://bernarddeluna.com/project/pure-css3-homer/">Homer</a> do Bernard de Luna, no mesmo dia desenvolvi o <a href="http://codepen.io/LFeh/details/qzDCJ">Cartman</a> e não parei mais, fiz <a href="http://codepen.io/LFeh/">outras brincadeiras com CSS</a>, mas principalmente comecei a buscar no CSS, soluções utilizáveis para os projetos.</p>

<p>Após desenvolver alguns componentes separadamente, imaginei que seria muito mais interessante deixar tudo em um local só.</p>

<h3>As possíveis técnicas</h3>

<p>Todos os componentes foram desenvolvidos usando duas técnicas: <code>:target</code> e <code>input hidden</code>.</p>

<p>Isso porque, através dessas técnicas conseguimos de fato fornecer um estado para um elemento alvo. Ou seja, conseguimos saber qual elemento está "ativo" e fornecer qualquer interação que podemos imaginar (e que os navegadores atuais suportem :p).</p>

<h3>Componentes</h3>

<h4>Carrossel</h4>

<p><a href="http://www.felipefialho.com/css-components/#component-carousel">Ver componente</a>.</p>

<p>Vamos observar o HTML:</p>

<p><pre><code>&lt;!-- Carousel --&gt;
&lt;div class="carousel"&gt;
  &lt;div class="carousel-inner"&gt;
    &lt;input class="carousel-open" type="radio" id="carousel-1" name="carousel" aria-hidden="true" hidden checked&gt;
    &lt;div class="carousel-item"&gt;
      ...
    &lt;/div&gt;
    &lt;input class="carousel-open" type="radio" id="carousel-2" name="carousel" aria-hidden="true" hidden&gt;
    &lt;div class="carousel-item"&gt;
      ...
    &lt;/div&gt;
    &lt;input class="carousel-open" type="radio" id="carousel-3" name="carousel" aria-hidden="true" hidden&gt;
    &lt;div class="carousel-item"&gt;
      ...
    &lt;/div&gt;
    &lt;label for="carousel-3" class="carousel-control prev control-1"&gt;‹&lt;/label&gt;
    &lt;label for="carousel-2" class="carousel-control next control-1"&gt;›&lt;/label&gt;
    &lt;label for="carousel-1" class="carousel-control prev control-2"&gt;‹&lt;/label&gt;
    &lt;label for="carousel-3" class="carousel-control next control-2"&gt;›&lt;/label&gt;
    &lt;label for="carousel-2" class="carousel-control prev control-3"&gt;‹&lt;/label&gt;
    &lt;label for="carousel-1" class="carousel-control next control-3"&gt;›&lt;/label&gt;
    &lt;ol class="carousel-indicators"&gt;
      &lt;li&gt;&lt;label for="carousel-1" class="carousel-bullet"&gt;•&lt;/label&gt;&lt;/li&gt;
      &lt;li&gt;&lt;label for="carousel-2" class="carousel-bullet"&gt;•&lt;/label&gt;&lt;/li&gt;
      &lt;li&gt;&lt;label for="carousel-3" class="carousel-bullet"&gt;•&lt;/label&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre> </p>

<p>Existe um <code>&lt;input class="carousel-open" type="radio" hidden &gt;</code> antes de cada item.</p>

<p>Usamos ainda pares de <code>&lt;label&gt;</code> com o <code>for</code> apontando para o item alvo. Esse é o truque.</p>

<p>Para os bullets de indicadores, também usamos <code>&lt;label&gt;</code> com o <code>for</code> apotando para o item alvo.</p>

<p>E agora o CSS passo a passo:</p>

<p>
<pre><code>.carousel-inner {
  position: relative;
  overflow: hidden;
}</code></pre>
</p>

<p>O <code>overflow: hidden</code> para nada aparecer fora do bloco e o <code>position: relative</code> para os filhos ficarem absolutos em relação a ele.</p>

<p>
<pre><code>.carousel-item {
  position: absolute;
  .opacity(0);
  .transition(opacity .6s ease-out);
}</code></pre>
</p>

<p>Deixamos todos os itens invisíveis através da opacidade 0. É definida uma animação de 6 segundos durante a mudança de opacidade. O <code>position: absolute</code> serve para os itens ficarem posicionados sem influenciar no tamanho do container.</p>

<p>
<pre><code>.carousel-open:checked + .carousel-item {
  position: static;
  .opacity(100);
}</code></pre>
</p>

<p>Atribuímos que quando o <code>.carousel-item</code> for o irmão imediato <code>+</code> do <code>.carousel-open</code> (no caso um <code>&lt;input radio hidden&gt;</code>) que estiver checkado, ficará visível e vai ficar com o <code>position: static</code>, e assim terá um tamanho que vai influenciar o container.</p>

<p>
<pre><code>.carousel-control {
  display: none;
}

#carousel-1:checked ~ .control-1,
#carousel-2:checked ~ .control-2,
#carousel-3:checked ~ .control-3 {display: block;}
</code></pre>
</p>

<p>Esse pedaço de código é para que os controles (as setas) funcionem da maneira esperada. Por padrão elas ficam com <code>display: none</code> e passam a ter <code>display: block</code> quando o irmão <code>~</code> especifico estiver checkado.</p>

<p>No HTML, definimos três pares de <code>label</code> que servirão como controles (no caso um carrossel com três itens), cada um deles habilita um item, e esses vão habilitar o par de <code>label</code> necessária.</p>

<p>
<pre><code>.carousel-bullet {
  color: #fff;
}

#carousel-1:checked ~ .control-1 ~ .carousel-indicators li:nth-child(1) .carousel-bullet,
#carousel-2:checked ~ .control-2 ~ .carousel-indicators li:nth-child(2) .carousel-bullet,
#carousel-3:checked ~ .control-3 ~ .carousel-indicators li:nth-child(3) .carousel-bullet {
  color: @color-primary;
}</code></pre>
</p>

<p>Aqui ativamos  o indicador. Basicamente, quando o item ativo for irmão do par de controle especifico, e esse também for irmão do indicador que desejamos alcançar (exemplo <code>li:nth-child(x)</code>)... ele também ficará ativo.</p>

<h4>Collapse</h4>

<p><a href="http://www.felipefialho.com/css-components/#component-collapse">Ver componente</a>.</p>

<p>O HTML:</p>

<p>
<pre><code>&lt;!-- Collapse --&gt;
&lt;div class="collapse"&gt;
  &lt;label class="collapse-open" for="collapse-1"&gt;Lorem ipsum dolor sit amet&lt;/label&gt;
  &lt;input class="collapse-open" type="checkbox" id="collapse-1" aria-hidden="true" hidden /&gt;
  &lt;div class="collapse-content"&gt;
    &lt;div class="collapse-inner"&gt;
      ...
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</p>

<p>Também vamos usar <code>&lt;input hidden /&gt;</code>, mas nesse caso vamos usar um <code>type="checkbox"</code>.</p>

<p>E se precisar que o Collapse funcione como um "accordion", basta usar <code>type="radio"</code> e o mesmo <code>name=""</code> para todos do grupo.</p>

<p>E o CSS:</p>

<p>
<pre><code>.collapse-painel {
  display: none;
}

.collapse-open:checked ~ .collapse-painel {
  display: block;
}
</code></pre>
</p>

<p>Esse é bem simples, por padrão todos os <code>.collapse-painel</code> vão ser <code>display: none</code> e quando o elemento <code>.collapse-open</code> estiver checkado, o <code>.collapse-painel</code> irmão <code>~</code> vai assumir <code>display: block</code>.</p>

<h4>Dropdown</h4>

<p><a href="http://www.felipefialho.com/css-components/#component-dropdown">Ver componente</a>.</p>

<p>O HTML:</p>

<p>
<pre><code>&lt;!-- Dropdown --&gt;
&lt;div class="dropdown"&gt;
  &lt;label for="dropdown-1" class="btn btn-dropdown"&gt;One Dropdown&lt;/label&gt;
  &lt;input class="dropdown-open" type="checkbox" id="dropdown-1" aria-hidden="true" hidden /&gt;
  &lt;div class="dropdown-inner"&gt;
    ...
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</p>

<p>O funcionamento é muito parecido com o Collapse, um <code>&lt;input hidden /&gt;</code>, com <code>type="checkbox"</code>.</p>

<p>E o CSS:</p>

<p>
<pre><code>.dropdown-inner {
  position: absolute;
  .opacity(0);
  .transition(opacity .1s);
  visibility: hidden;
}</code></pre>
</p>

<p>O dropdown terá <code>position: absolute</code> e por padrão vai ter <code>.opacity(0)</code> e <code>visibility: hidden</code> para ficar escondido. O motivo de usar <code>visibility: hidden</code> e não <code>display: none</code> é porque dessa forma conseguimos adicionar efeito de transição, aplicado com <code>.transition(opacity .1s);</code>.</p>

<p>
<pre><code>.dropdown-hover:hover .dropdown-inner,
.dropdown-open:checked ~ .dropdown-inner {
  .opacity(100);
  visibility: visible;
}</code></pre>
</p>

<p>Quando o <code>.dropdown-hover</code> ou <code>.dropdown-open</code> estiverem com status <code>:hover ou :checked</code>, o <code>.dropdown-inner</code> irmão <code>~</code> vai ficar visível.</p>

<h4>Modal</h4>

<p><a href="http://www.felipefialho.com/css-components/#component-modal">Ver componente</a>.</p>

<p>O HTML:</p>

<p>
<pre><code>&lt;a href="#modal-one" class="btn">Example&lt;/a&gt;

&lt;!-- Modal --&gt;
&lt;div class="modal" id="modal-one" aria-hidden="true"&gt;
  &lt;div class="modal-dialog"&gt;
    &lt;div class="modal-header"&gt;
      ...
      &lt;a class="btn-close" href="#" aria-hidden="true"&gt;×&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="modal-body"&gt;
      ...
    &lt;/div&gt;
    &lt;div class="modal-footer"&gt;
      ...
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</p>

<p>Também poderia ser usado a técnica do <code>&lt;input hidden /&gt;</code>, mas dessa vez vamos usar o <code>:target</code>. Temos portanto uma estrutura padrão de Modal com o botão fazendo referencia ao <code>id</code> do modal que desejamos ativar.</p>

<p>O CSS:</p>

<p>
<pre><code>.modal {

  // This is modal bg
  &:before {
    content: "";
    display: none;
    background: rgba(0,0,0,.6);
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    z-index: 1001;
  }

  &:target {

    // Active animate in modal
    &:before {
      display: block;
    }
    .modal-dialog {
      .translate(0, 0);
      top: 20%;
    }

  }

}</code></pre>
</p>

<p>O <code>:before</code> cria o background do modal (o fundo escuro), dessa forma não precisamos criar nenhum elemento adicional, por padrão ele tem <code>display: none</code>.</p>

<p>Através do <code>:target</code> informamos que o background (<code>:before</code>) terá <code>display: block</code> e o elemento <code>.modal-dialog</code> terá o translate zerado e <code>top: 20%</code>.</p>

<p>
<pre><code>
// Mixin for transition/transform
.transition-transform(@transition) {
  -webkit-transition: -webkit-transform @transition;
     -moz-transition: -moz-transform @transition;
       -o-transition: -o-transform @transition;
          transition: transform @transition;
}

// Modal dialog
.modal-dialog {
  margin-left: -300px;
  position: fixed;
  left: 50%;
  top: -100%;
  .translate(0, -500%);
  .transition-transform(~"0.3s ease-out");
  width: 80%;
  max-width: 600px;
  z-index: 1111;
}</code></pre>
</p>

<p>Deixamos com <code>.translate(0, -500%)</code>, assim ele fica fora da área visível, para a animação usamos <code>.transition-transform(~"0.3s ease-out")</code>, que está definido em um mixin. O <code>top</code> inicial fica definido com <code>-100%</code>.</p>

<h4>Tab</h4>

<p><a href="http://www.felipefialho.com/css-components/#component-tab">Ver componente</a>.</p>

<p>O HTML:</p>

<p>
<pre><code>&lt;!-- Tab --&gt;
&lt;div class="tab"&gt;

  &lt;!-- Tab Painel --&gt;
  &lt;div class="tab-painel"&gt;
    &lt;input class="tab-open" id="tab-1" name="tab-wrap-1" type="radio" aria-hidden="true" hidden checked&gt;
    &lt;label class="tab-nav" for="tab-1"&gt;Tab 1&lt;/label&gt;
    &lt;div class="tab-inner"&gt;
      ...
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="tab-painel"&gt;
    &lt;input class="tab-open" id="tab-2" name="tab-wrap-1" type="radio" aria-hidden="true" hidden&gt;
    &lt;label class="tab-nav" for="tab-2"&gt;Tab 2&lt;/label&gt;
    &lt;div class="tab-inner"&gt;
      ...
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="tab-painel"&gt;
    &lt;input class="tab-open" id="tab-3" name="tab-wrap-1" type="radio" aria-hidden="true" hidden /&gt;
    &lt;label class="tab-nav" for="tab-3"&gt;Tab 3&lt;/label&gt;
    &lt;div class="tab-inner"&gt;
      ...
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/div&gt;</code></pre>
</p>

<p>Mais um caso de uso do <code>&lt;input hidden /&gt;</code> do tipo <code>radio</code>.</p>

<p>A maior diferença dessa estrutura para a usada normalmente para tabs, é não ter um elemento de agrupamento para o menu. Precisamos utilizar um <code>&lt;label&gt;</code> com a classe <code>.tab-nav</code>, entre o <code>&lt;input hidden /&gt;</code> e o <code>.tab-inner</code></p>

<p>O CSS:</p>

<p>
<pre><code>.tab{
  position: relative;
}

.tab-painel{
  display: inline-block;
  min-height: 150px;
}</code></pre>
</p>

<p>Adicionamos <code>position: relative</code> na <code>.tab</code> para que os elementos absolutos se posicionem a partir dele. No <code>.tab-painel</code> colocamos um tamanho minimo e <code>display: inline-block</code> para que fique lado-a-lado.</p>

<p>
<pre><code>.tab-nav {
  border: @gray-light solid 1px;
  cursor: pointer;
  display: inline-block;
  padding: (@space / 2) @space;
  margin-right: @space;
}

.tab-nav:hover,
.tab-open:checked ~ .tab-nav {
  background-color: @gray-lighter;
}</code></pre>
</p>

<p>Aqui damos algumas características visuais simples para a <code>.tab-nav</code>.</p>

<p>
<pre><code>.tab-inner {
  .opacity(0);
  margin-top: @space;
  position: absolute; left: 0;
  .transition(opacity .1s);
  visibility: hidden;
}

.tab-open:checked ~ .tab-inner{
  .opacity(100);
  visibility: visible;
}</code></pre>
</p>

<p>Definimos que a <code>.tab-inner</code> por padrão seja invisível e absoluta. Em seguida definimos que ela ficará visível quando o <code>.tab-open</code> irmão estiver como <code>:checked</code>.</p>

<h3>Teste real</h3>

<p>E a melhor maneira de testar, é aplicando em um projeto real. Para isso escolhi meu site.</p>

<hr>

<p>Aqui um resultado de teste no <a href="gtmetrix.com">GTMetrix</a> antes da alteração.</p>

<p><img src="/assets/img/blog/etc/gt-metrix-old.jpg" alt="Resultado com Javascript"></p>

<hr>

<p>Fui radical e removi todo o Javascript do projeto. Passei a usar o CSS Componentes de Modal e Collapse.</p>

<p><img src="/assets/img/blog/etc/gt-metrix-new.jpg" alt="Resultado sem Javascript"></p>

<hr>

<p>Como plus, otimizei o carregamento dos icones e retirei a imagem de "fork".</p>

<p><img src="/assets/img/blog/etc/gt-metrix-plus.jpg" alt="Resultado Otimizado"></p>
  
<p>Como podem observar, o resultado ao usar o CSS Components foi satisfatório. Mas o que trouxe mais resultados foi essa pequena otimização, retirando a imagem de "fork" e melhorando o carregamento dos ícones adicionando direto no CSS, evitando assim mais requisições.</p>

<p>Isso mostra que qualquer ganho de performance é importante, mas alguns ajustes que muitas vezes não lembramos de fazer, podem ser mais decisivos na otimização.</p>

<h3>Conclusão</h3>

<p>Afirmo que <b>SIM</b>, é possível utilizar componentes apenas em CSS, especialmente em projetos menores. E não duvido que isso possa ser uma tendência daqui para frente.</p> 

<p>O Javascript se consolida cada vez mais para várias funções que não usávamos antigamente, e vejo boas possibilidades do CSS ter um papel cada vez mais importante na manipulação de interações.</p>

<p class="end">Espero que tenham gostado :D</p>
