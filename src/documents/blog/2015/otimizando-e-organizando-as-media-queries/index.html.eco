---
title: "Otimizando e Organizando as Media Queries"
datePost: 23/07/2015
layout: "post"
relativeOutDirPath: 'posts'
path: "../../../"
pathBlog: "../../"
---

<p class="lead">Quando o assunto é Mobile First, Media Queries e otimização de código eu tenho uma regra: Evitar ao máximo resetar propriedades.</p>
 
<div class="img-box">
  <img src="/assets/img/blog/etc/jogo-de-xadrez.jpg" alt="Imagem de um jogo de xadrez">
</div>

<h3>Começando do começo</h3>

<p>Acabei de chegar da 9ª edição do <a href="http://www.meetup.com/pt/CSS-SP/">Meetup CSS</a> que teve como tema <b>Media Queries</b>, a talk foi muito bem apresentada pelo <a href="https://twitter.com/matmarsiglio">Matheus Marsiglio</a> e em seguida tivemos um ótimo debate técnico sobre o assunto.</p>

<p>Fiquei feliz em saber que muita gente já está utilizando a abordagem de componentização de Media Queries, assunto que já abordei <a href="http://www.felipefialho.com/blog/2014/css-modular-com-mobile-first/">>nessa postagem</a> e mais recentemente teve <a href="http://www.raphaelfabeni.com.br/componentes-responsivos/">um artigo</a> do <a href="https://twitter.com/raphaelfabeni">Raphael Fabeni</a> sobre isso.

</p>Apesar de já ter falado sobre isso, o assunto é tão interessante e importante que vale um novo artigo.</p>

<h3>"Transforma esse site em mobile ai?"</h3>

<p>Alguns anos atrás, quando as pessoas começaram a perceber a importância de ter um site mobile e notaram que não havia sentido em ter duas versões para o mesmo site, começamos a aplicar o principio da responsividade nos nossos projetos.</p>

<p>Porém, nem nós, nem os clientes estávamos muito preparados para lidar com isso. E usávamos as armas que tínhamos para resolver essa questão, e essas armas podem ser resumidas em: muito display: none e muita propriedade resetada.</p>

<p>O normal naquele momento era ter uma folha de estilo separada, ou um espaço no final do arquivo, onde adaptávamos o projeto para a tal sonhada versão mobile.</p>

<p>Essa técnica tinha vários problemas. O site não era necessariamente pensado para dispositivos menores, ganhava somente uma adaptação. Fora todos os problemas de usabilidade, tínhamos outra grave questão: <strong>Manutenção</strong>.</p>

<p>Por mais que o código fosse organizado, era muito difícil e chato dar manutenção, e caso, por exemplo, alguma classe fosse retirada do CSS, nem sempre lembrávamos que ela estava duplicada em outro arquivo ou no fim do CSS, com isso o código ficava cheio de coisas desnecessárias que nem estavam sendo usadas.</p>

<p>Caso ainda esteja usando essa abordagem, talvez seja a hora de tentar utilizar outros conceitos.</p>

<h4>E então o Mobile First ganhou força!</h4>

<p>Após algum tempo, com as pessoas usando smartphones de forma frenética, começamos a dar mais importância para o acesso mobile. E isso foi crescendo de tal forma, que concluímos que fazia mais sentido começar a concepção do projeto, e também o código, por dispositivos com telas menores e ir crescendo progressivamente, essa técnica ficou conhecida como <strong>Mobile First</strong>.</p>

<h3>O meu estilo de Mobile First :)</h3>

<p>Como disse no inicio do artigo, quando se trata de otimizar o código para essa metodologia a minha principal regra é: Evitar ao <b>máximo</b> resetar propriedades. </p>

<p>É bom avisar, que o IE7 e IE8 ignora Media Queries, portanto caso tenha que fornecer suporte para esses navegadores recomendo o Respond.js (https://github.com/scottjehl/Respond). Assim tudo vai funcionar perfeitamente (até parece...) nesses navegadores.</p>

<p>O primeiro ponto, é que crio algumas variáveis de breakpoints e replico elas conforme a necessidade. Peguei esse costume no tempo em que usava o Bootstrap e mantive até hoje, eu acho que faz todo sentido e torna o fluxo mais fluido.</p>

<p><code>
<pre>// 
// Media Queries 
// --------------------------------------------------

$screen-xs = 480px // Extra small screen  
$screen-sm = 768px // Small screen 
$screen-md = 992px // Medium screen  
$screen-lg = 1200px // Large screen  
$screen-xlg = 1600px // Extra Large screen  
$screen-xxlg = 1900px // Extra Large screen  
 
$screen-xs-max = ($screen-sm - 1)
$screen-sm-max = ($screen-md - 1)
$screen-md-max = ($screen-lg - 1)
$screen-lg-max = ($screen-xlg - 1)
$screen-xlg-max = ($screen-xxlg - 1)</pre></code></p>

<p>O segundo ponto é que eu uso Stylus e SEMPRE adiciono as linhas de Media Querie aninhadas dentro do elemento.  E não no final do arquivo do componente, e muito menos em um arquivo separado.</p>

<p><code>
<pre>.header 
    @media (min-width $screen-sm)
       ...</pre></code></p>

<p>O terceiro ponto, é que nos exemplos desse artigo não vou levar em consideração propriedades muito especificas de cada dispositivo, resoluções em retina, nem nada do tipo, mas o conceito é exatamente o mesmo.</p>

<h3>Situação real</h3>

<p>Vamos pensar na seguinte situação, que alias é muito comum: Você tem um menu, e a versão "mobile" e "desktop" são completamente diferentes uma da outra.</p>

<ul>
  <li>Na versão mobile ele deve ser fixo, com um botão hambúrguer e o menu só ficará visível após clicar no botão. Quando os itens estiverem visíveis, eles devem estar em blocos um abaixo do outro</li>
</ul> 

<p>Seria exatamente assim:</p>

<p data-height="300" data-theme-id="0" data-slug-hash="jPvdgp" data-default-tab="result" data-user="LFeh" class='codepen'>See the Pen <a href='http://codepen.io/LFeh/pen/jPvdgp/'>Menu - Mobile Example</a> by Luiz Felipe Tartarotti Fialho (<a href='http://codepen.io/LFeh'>@LFeh</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>
 
<ul>
  <li>Já na versão desktop, ele deve estar sempre visível, não deve estar fixo e os itens devem ser posicionados um ao lado do outro</li>
</ul> 

<p>Então ele ficaria dessa forma:</p>

<p data-height="300" data-theme-id="0" data-slug-hash="LVJaEG" data-default-tab="result" data-user="LFeh" class='codepen'>See the Pen <a href='http://codepen.io/LFeh/pen/LVJaEG/'>Menu - Desktop Example</a> by Luiz Felipe Tartarotti Fialho (<a href='http://codepen.io/LFeh'>@LFeh</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>Observem que utilizo o mesmo HTML (Jade) em ambos os exemplos.</p>

<h4>Agora vamos juntar os dois códigos seguindo a minha metodologia</h4>

<p>O resultado será esse! (pode dar resize para ver as mudanças)</p>

<p data-height="300" data-theme-id="0" data-slug-hash="GJXeJv" data-default-tab="result" data-user="LFeh" class='codepen'>See the Pen <a href='http://codepen.io/LFeh/pen/GJXeJv/'>Menu - Responsive Example</a> by Luiz Felipe Tartarotti Fialho (<a href='http://codepen.io/LFeh'>@LFeh</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>Observem bem o código.</p>

<p>Como foi feito?</p>

<ul>
  <li>Tudo que é padrão para ambas as resoluções fica fora das Media Queries</li>
  <li>Propriedades especificas, que só devem funcionar em determinada resolução, ficam dentro da Media Querie relacionada</li>
</ul> 

<p>Eu não zerei <b>nenhuma</b> propriedade e evitei que código desnecessário fosse renderizado em resoluções que não deveriam funcionar.</p>

<h4>"Mas se eu adicionar um monte de breakpoints aninhados dentro dos elementos não vou adicionar muito código extra?"</h4>

<p>NÃO! :D</p>

<p>Por sorte, temos plugins <a href="https://github.com/buildingblocks/grunt-combine-media-queries">para o Grunt</a> e <a href="https://www.npmjs.com/package/gulp-combine-media-queries">para o Gulp</a> que resolvem esse problema.</p>

<p>Eles vão fazer uma analise em todo o seu CSS, unificar as Media Queries iguais e jogar no fim do arquivo. Da mesma forma que era feito antes, mas sem precisar ter contato com esse código bagunçado.</p>

<hr>
  
<p class="end">Ficou claro? Gostaram do post? Aguardo feedbacks ;)</p>

 


